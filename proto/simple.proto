//protoc -I . simple.proto --go_out=plugins=grpc:.
//protoc --govalidators_out=. --go_out=plugins=grpc:./ ./simple.proto
syntax = "proto3";// 协议为proto3

option go_package = ".;proto";

import "github.com/mwitkow/go-proto-validators/validator.proto";

// 定义发送请求信息
message SimpleRequest{
    // 定义发送的参数，采用驼峰命名方式，小写加下划线，如：student_name
    // 请求参数
    string data = 1;
}

// 定义响应信息
message SimpleResponse{
    // 定义接收的参数
    // 参数类型 参数名 标识号(不可重复)
    int32 code = 1;
    string value = 2;
}

message StreamRequest{
    string stream_req = 1;
}

// 定义流式响应信息
message StreamResponse{
    // 流式响应数据
    string stream_res = 1;
}

message InnerMessage {
    // some_integer can only be in range (1, 100).
    int32 some_integer = 1 [(validator.field) = {int_gt: 0, int_lt: 100}];
    // some_float can only be in range (0;1).
    double some_float = 2 [(validator.field) = {float_gte: 0, float_lte: 1}];
  }
  
message OuterMessage {
// important_string must be a lowercase alpha-numeric of 5 to 30 characters (RE2 syntax).
string important_string = 1 [(validator.field) = {regex: "^[a-z]{2,5}$"}];
// proto3 doesn't have `required`, the `msg_exist` enforces presence of InnerMessage.
InnerMessage inner = 2 [(validator.field) = {msg_exists : true}];
}


service AllService{
    rpc Route (SimpleRequest) returns (SimpleResponse){};
    //股票
    rpc ListValue(SimpleRequest)returns(stream StreamResponse){};//服务端stream
    //物联网上报
    rpc RouteList(stream StreamRequest)returns(SimpleResponse){};//客户端stream
    // 双向流式rpc，同时在请求参数前和响应参数前加上stream
    rpc Conversations(stream StreamRequest) returns(stream StreamResponse){};

    rpc RouteVali (InnerMessage) returns (OuterMessage){};
}
