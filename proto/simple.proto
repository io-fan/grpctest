//protoc -I . simple.proto --go_out=plugins=grpc:.
//protoc --govalidators_out=. --go_out=plugins=grpc:./ ./simple.proto
/*
simple.proto文件引用了google/api/annotations.proto（来源），先要把它编译了。
这里是把google/文件夹直接复制到项目中的proto/目录中进行编译。发现annotations.proto引用了google/api/http.proto，那把它也编译了。
进入annotations.proto所在目录，编译：
protoc --go_out=plugins=grpc:./ ./http.proto
protoc --go_out=plugins=grpc:./ ./annotations.proto
*/

/*
For both the go_package option and the M flag, the value may include an explicit package name separated from the import path by a semicolon.
For example: "example.com/protos/foo;package_name". This usage is discouraged since the package name will be derived by default from the import path in a reasonable manner.

There is no correlation between the Go import path and the package specifier in the .proto file. 
The latter is only relevant to the protobuf namespace, while the former is only relevant to the Go namespace. 
Also, there is no correlation between the Go import path and the .proto import path.
*/

/*
cd proto ,vscode setting.json protobuf path is different from go path
protoc --go_out=plugins=grpc:./google/api/ .\google\api\http.proto
protoc --go_out=plugins=grpc:./google/api/ .\google\api\annotations.proto
protoc -I . -I=D:\mygopath\src -I=D:\mygopath\pkg\mod\ --govalidators_out=./ --go_out=plugins=grpc:./ .\simple.proto
protoc -I . -I=D:\mygopath\src -I=D:\mygopath\pkg\mod\ --grpc-gateway_out=logtostderr=true:. ./simple.proto

*/

syntax = "proto3";// 协议为proto3

//package fwl.grpcexample;
option go_package = "./;annotations";

/*
protoc-gen-go: Go package "." has inconsistent names annotations (proto/google/api/annotations.proto) and proto (proto/simple.proto)
--go_out: protoc-gen-go: Plugin failed with status code 1.
You need to change your option go_package into
option go_package = "./;pb";
The first param means relative path where the code you want to generate. The path relative to the --go_out , you set in your command.
*/
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";

// 定义发送请求信息
message SimpleRequest{
    // 定义发送的参数，采用驼峰命名方式，小写加下划线，如：student_name
    // 请求参数
    string data = 1;
}

// 定义响应信息
message SimpleResponse{
    // 定义接收的参数
    // 参数类型 参数名 标识号(不可重复)
    int32 code = 1;
    string value = 2;
}

message StreamRequest{
    string stream_req = 1;
}

// 定义流式响应信息
message StreamResponse{
    // 流式响应数据
    string stream_res = 1;
}

message InnerMessage {
    // some_integer can only be in range (1, 100).
    int32 some_integer = 1 [(validator.field) = {int_gt: 0, int_lt: 100}];
    // some_float can only be in range (0;1).
    double some_float = 2 [(validator.field) = {float_gte: 0, float_lte: 1}];
  }
  
message OuterMessage {
// important_string must be a lowercase alpha-numeric of 5 to 30 characters (RE2 syntax).
string important_string = 1 [(validator.field) = {regex: "^[a-z]{2,5}$"}];
// proto3 doesn't have `required`, the `msg_exist` enforces presence of InnerMessage.
InnerMessage inner = 2 [(validator.field) = {msg_exists : true}];
}


service AllService{
    rpc Route (SimpleRequest) returns (SimpleResponse){};
    //股票
    rpc ListValue(SimpleRequest)returns(stream StreamResponse){};//服务端stream
    //物联网上报
    rpc RouteList(stream StreamRequest)returns(SimpleResponse){};//客户端stream
    // 双向流式rpc，同时在请求参数前和响应参数前加上stream
    rpc Conversations(stream StreamRequest) returns(stream StreamResponse){};

    rpc RouteVali (InnerMessage) returns (OuterMessage){
        option (google.api.http) ={
            post:"/v1/example/route"
            body:"*"
        };
    };
}
